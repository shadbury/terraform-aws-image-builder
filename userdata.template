#!/bin/bash
set -eo pipefail

test -w /dev/console || sleep 5
exec > >(tee /var/log/cloud-init-output.log|logger -t user-data -s 2>/dev/console) 2>&1

# Install SSM agent
sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
sudo systemctl enable amazon-ssm-agent
sudo systemctl start amazon-ssm-agent

#Install cfn helper scripts
yum install wget -y
yum install python-setuptools -y
cd /tmp
wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
mkdir -p /opt/aws/bin
curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
python get-pip.py
pip install python-daemon==1.6
pip install pystache==0.5.4
easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz

# Update packages and install squid, unzip, firewalld
yum update -y
yum install squid -y
yum install unzip -y
yum install firewalld -y

#Start Squid for codedeploy
systemctl start squid

# Install td-agent
curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent3.sh | sh
/usr/sbin/td-agent-gem install fluent-plugin-forest
sed -i "s/User=td-agent/User=root/g" /usr/lib/systemd/system/td-agent.service
sed -i "s/Group=td-agent/Group=root/g" /usr/lib/systemd/system/td-agent.service

#Install CodeDeploy agent
sudo yum install ruby -y
wget https://aws-codedeploy-ap-southeast-2.s3.ap-southeast-2.amazonaws.com/latest/install
chmod +x ./install
sudo ./install auto

# Set Instance ID in td-agent output file
INSTANCE_ID=$(curl -Ss http://169.254.169.254/latest/meta-data/instance-id)
sed -i "s/instance_id/$INSTANCE_ID/g" /etc/td-agent/td-agent.conf
# Enable and start td-agent
sudo systemctl enable td-agent
# || true add to td-agent start due to systemd throwing error when service starts, even through service runs ok.
sudo systemctl restart td-agent || true

#Install aws cli
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

#Install CrowdStrike
aws s3 cp s3://devops-software-store/Crowdstrike/falcon-sensor-5.32.0-9705.el7.x86_64.rpm ./
sudo yum install falcon-sensor-5.32.0-9705.el7.x86_64.rpm -y
sudo /opt/CrowdStrike/falconctl -s --cid=D386585289EF4E3B882EEEBFBE2AF4CC-F1
sudo systemctl start falcon-sensor

#Install CloudWatch agent
wget https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
sudo rpm -U ./amazon-cloudwatch-agent.rpm

/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop

if [ "False" == "True" ]; then
  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/tmp/awsagent.json
  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -c file:/tmp/awsagent_metric.json -s
else
  /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/tmp/awsagent.json -s
fi

ProxyType=ExplicitOnly

# Disable Source/Destination checking
aws ec2 modify-instance-attribute --instance-id $INSTANCE_ID --source-dest-check "{\"Value\": false}" --region ap-southeast-2

# Configure IP forwarding
echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
sysctl -p

CPUS=$(grep -c processor /proc/cpuinfo)

# If there are 4 or more cores, calculate and populate Squids worker and cpu_affinity_map config options
if [[ $CPUS -ge 4 ]]; then

  echo "" >> /etc/squid/squid.conf
  echo "#" >> /etc/squid/squid.conf
  echo "# Squid Worker & CPU Affinity Settings" >> /etc/squid/squid.conf
  echo "#" >> /etc/squid/squid.conf
  echo "workers $(($CPUS - 2 ))" >> /etc/squid/squid.conf  # Minus 1 for the core OS and another for the coordinator process.

  CORES=$CPUS
  PROCESS=$(($CPUS - 1))
  PROCESS_NUMBERS="$PROCESS"
  while [ $CPUS -gt 2 ] # With cpu_affinity_map cores start at #1 which should be left to the OS
  do

    PROCESS=$(($PROCESS - 1))
    PROCESS_NUMBERS="$PROCESS,$PROCESS_NUMBERS"

    CORE=$(( $CPUS - 1 ))
    CORES="$CORE,$CORES"
    CPUS=$(( $CPUS - 1 ))

  done
  echo "cpu_affinity_map process_numbers=$PROCESS_NUMBERS cores=$CORES" >> /etc/squid/squid.conf

fi

# Restart Squid for changes to take effect
systemctl restart squid

systemctl stop firewalld

# Offline mode is required as the Firewalld service will not be active during the bootstrap process
# despite having the above start request/command.
PrivateIP=$(ifconfig | grep 'inet' | awk '{ print $2 }' | head -n 1)

firewall-offline-cmd --direct --add-rule ipv4 filter INPUT 0 -p tcp -m state --state NEW -m tcp --dport 3128 -j ACCEPT
firewall-offline-cmd --direct --add-rule ipv4 nat PREROUTING 0 -p tcp --dport 80 -j DNAT --to $PrivateIP:3128
firewall-offline-cmd --direct --add-rule ipv4 nat PREROUTING 0 -p tcp --dport 443 -j DNAT --to $PrivateIP:3128

systemctl restart firewalld
echo "Running curl of www.google.com through proxy, and ensuring entry appears in access log..."
http_proxy=localhost:3128 /usr/bin/curl http://www.google.com > /dev/null 2>&1 && \
/bin/grep www.google.com /var/log/squid/access.log
LOGRESULT=$?
# grep will return non-zero if no results were returned
if [[ $LOGRESULT -eq 0 ]]; then
  echo "curl was successful"
else
  exit 1
fi
echo 'Waiting for instances to be in-service in the ELB'
until [ "$state" == "\"healthy\"" ]; do
    state=$(aws --region ap-southeast-2 elbv2 describe-target-health --target-group-arn arn:aws:elasticloadbalancing:ap-southeast-2:005053604848:targetgroup/belon-Netwo-DLUS6O8RSSTQ/2add6031f9a90c67 \
      --targets Id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id),Port=3128 \
      --query TargetHealthDescriptions[0].TargetHealth.State) || true;
      echo 'Not healthy, waiting 10 seconds ...'
    sleep 10
done

# Setting common function variables
MAC=$(curl -Ss http://169.254.169.254/latest/meta-data/mac)
INTERFACEID=$(curl -Ss http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/interface-id)
INTERFACEAZ=$(curl -Ss http://169.254.169.254/latest/meta-data/placement/availability-zone)

# Function which allocates an Elastic IP (EIP) to an auto-scaling instance
eip_allocation () {

  # EIP association section
  IFS=',' read -ra EIPS <<< "" # Convert comma delimited list to bash array
  INSTANCEID=$(curl -Ss http://169.254.169.254/latest/meta-data/instance-id)
  SCALINGGROUPNAME=$(aws autoscaling describe-auto-scaling-instances --instance-ids $INSTANCEID --region ap-southeast-2 | jq '.AutoScalingInstances[0].AutoScalingGroupName')

  # Loop through provided EIPs
  for eip in "${EIPS[@]}"; do

      echo "Reviewing provided EIP - $eip..."

      # Review EIP tags and schedule/flag new association accordingly
      ASSOCIATE=false # Setting the association flag to false
      EIPDATA=$(aws ec2 describe-addresses --public-ips $eip --region ap-southeast-2)
      TAGS=$(echo $EIPDATA | jq '.Addresses[0].Tags')
      ALLOCATIONID=$(echo $EIPDATA | jq '.Addresses[0].AllocationId' | sed -e 's/^"//' -e 's/"$//')
      if [ "$TAGS" = "null" ]; then

          echo "$eip has no tags, creating both AZ and AutoScalingGroup tags as well as flagging association update..."

          ASSOCIATE=true
          EIPAZ=$INTERFACEAZ
          aws ec2 create-tags --resources $ALLOCATIONID --tags Key=AZ,Value=$INTERFACEAZ --region ap-southeast-2
          aws ec2 create-tags --resources $ALLOCATIONID --tags Key=AutoScalingGroup,Value=$SCALINGGROUPNAME --region ap-southeast-2

      else

          echo "$eip has tags, checking for AZ tag..."

          EIPAZ=$(echo $TAGS | jq -r '.[] | select(.Key == "AZ") | .Value')
          if [ "$EIPAZ" = "" ]; then

              echo "No AZ tag found, applying tag..."

              EIPAZ=$INTERFACEAZ
              aws ec2 create-tags --resources $ALLOCATIONID --tags Key=AZ,Value=$INTERFACEAZ --region ap-southeast-2

          fi

          echo "Checking for AutoScalingGroup tag..."

          EIPSCALINGGROUP=$(echo $TAGS | jq -r '.[] | select(.Key == "AutoScalingGroup") | .Value')
          if [ "$EIPSCALINGGROUP" = "" ]; then

              echo "No AutoScalingGroup tag found, applying tag and flagging association update..."

              ASSOCIATE=true
              aws ec2 create-tags --resources $ALLOCATIONID --tags Key=AutoScalingGroup,Value=$SCALINGGROUPNAME --region ap-southeast-2

          else

              echo "AutoScalingGroup tag found, confirming it's part of this group..."

              if [ "$SCALINGGROUPNAME" != "$EIPSCALINGGROUP" ]; then

                  echo "AutoScalingGroup is different to this group, updating tag and flagging association update..."

                  ASSOCIATE=true
                  aws ec2 create-tags --resources $ALLOCATIONID --tags Key=AutoScalingGroup,Value=$SCALINGGROUPNAME --region ap-southeast-2

              fi
          fi

      fi

      # Skip association update/review if EIP and Instance aren't in the same AZ
      if [ "$INTERFACEAZ" != "$EIPAZ" ]; then
          echo "EIP and Instance are not in the same AZ, processing next EIP..."
          continue
      fi

      # Associate EIP with intance depending on certain criteria
      ASSOCIATIONID=$(echo $EIPDATA | jq '.Addresses[0].AssociationId')
      EIPINSTANCEID=$(echo $EIPDATA | jq '.Addresses[0].InstanceId' | sed -e 's/^"//' -e 's/"$//')
      if [ "$ASSOCIATIONID" = "null" ]; then

          echo "$eip is not associated, associating with the ENI attached to this instance..."

          aws ec2 associate-address --network-interface-id "$INTERFACEID" --allow-reassociation --allocation-id "$ALLOCATIONID" --region ap-southeast-2
          break

      else

          echo "$eip is already associated with resource $EIPINSTANCEID, associate if flagged under tag review, or if the current instance is not in a running state..."

          INSTANCESTATE=$(aws ec2 describe-instances --instance-ids $EIPINSTANCEID --region ap-southeast-2 | jq '.Reservations[0].Instances[0].State.Code')
          if $ASSOCIATE; then

              aws ec2 associate-address --network-interface-id "$INTERFACEID" --allow-reassociation --allocation-id "$ALLOCATIONID" --region ap-southeast-2
              break

          elif [ "$INSTANCESTATE" != "16" ]; then # Code 16 means the instance is in a RUNNING state

              aws ec2 associate-address --network-interface-id "$INTERFACEID" --allow-reassociation --allocation-id "$ALLOCATIONID" --region ap-southeast-2
              break

          fi
      fi
  done

}

# Function to update the 0.0.0.0/0 route on a supplied Route Table
update_route_table () {

    route_tables=("$@")
    for route_table in "${route_tables[@]}"; do

        echo "Attempt to replace route 0.0.0.0/0 route on $route_table"
        RESULT=0
        aws ec2 replace-route --route-table-id $route_table --destination-cidr-block 0.0.0.0/0 --network-interface-id $INTERFACEID --region ap-southeast-2 || RESULT=$?

        if [[ $RESULT -eq 0 ]]; then

            echo "Successfully replaced 0.0.0.0/0 route on $route_table"

        else

            echo "Failed to replace 0.0.0.0/0 route on $route_table, trying create-route."
            RESULT=0
            aws ec2 create-route --route-table-id $route_table --destination-cidr-block 0.0.0.0/0 --network-interface-id $INTERFACEID --region ap-southeast-2 || RESULT=$?

            if [[ $RESULT -eq 0 ]]; then

                echo "Successfully created 0.0.0.0/0 route on $route_table"

            else

                echo "Was unable to create 0.0.0.0/0 route on $route_table"
                exit 1

            fi
        fi
    done
}

# AWS API ations required when using DualMode
if [ "$ProxyType" == "DualMode" ]; then

  # Obtain Route Table IDs
  ROUTETABLESAZA=()
  ROUTETABLESAZB=()
  ROUTETABLESAZC=()

  # Update the relevant Route Table based on the instance AZ location
  if [ "$INTERFACEAZ" = "ap-southeast-2a" ]; then

      update_route_table "${ROUTETABLESAZA[@]}"

  elif [ "$INTERFACEAZ" = "ap-southeast-2b" ]; then

      update_route_table "${ROUTETABLESAZB[@]}"

  elif [ "$INTERFACEAZ" = "ap-southeast-2c" ]; then

      update_route_table "${ROUTETABLESAZC[@]}"

  fi

  IPOPTION=Dynamic

  if [ "$IPOPTION" == "Static" ]; then

    eip_allocation

  fi

elif [ "$ProxyType" = "ExplicitOnly" ]; then

  IPOPTION=Dynamic

  if [ "$IPOPTION" == "Static" ]; then

    eip_allocation

  fi

fi